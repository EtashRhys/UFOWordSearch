import pygame
import random
import string

# Initialize Pygame
pygame.init()

# Screen dimensions
screen = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
screen_width, screen_height = screen.get_size()
pygame.display.set_caption("Word Search Game")

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GRAY = (200, 200, 200)
BLUE = (100, 149, 237)
GREEN = (50, 205, 50)
RED = (255, 0, 0)

# Fonts
pygame.font.init()
font = pygame.font.SysFont("Arial", 24)
large_font = pygame.font.SysFont("Arial", 80)  # Larger font for visibility
small_font = pygame.font.SysFont("Arial", 18)

# UFO Word Search Setup
TOPICS = {
    "UFO Sightings": ["ROSWEll", "RENDLESHAM", "PHOENIX", "TRIANGLE", "FLYING", "DISK", "LIGHTS", "OBJECT", "CIRCLE", "SAUCER"],
    "Abductions": ["HILL", "WALTON", "MOTHMAN", "GREYS", "REPTILIAN", "CONTACT", "BEAM", "CRAFT", "MEMORY", "PROBE"],
    "Crop Circles": ["WILTSHIRE", "PATTERN", "FIELD", "HOAX", "DESIGN", "GEOMETRIC", "PLASMA", "SYMBOL", "HARVEST", "MYSTERY"],
    "Alien Species": ["ZETA", "RETICULI", "GREYS", "NORDICS", "REPTILIANS", "ANNUNAKI", "DRACO", "HYBRID", "ARCTURIANS", "PLEIADIANS"],
    "Men in Black": ["BLACK", "SUIT", "GOVERNMENT", "AGENT", "SECRET", "SHADOW", "COVERUP", "MYSTERIOUS", "CONTROL", "ENIGMA"],
    "Ancient Aliens": ["PYRAMID", "MACHU", "NAZCA", "CARVINGS", "PETROGLYPHS", "MONOLITH", "GODS", "VISITORS", "TECHNOLOGY", "STARS"],
    "Famous UFO Cases": ["KECKSBURG", "ROSWELL", "PHOENIX", "BELGIUM", "SHAG", "KENT", "HUDSON", "WASHINGTON", "FLAP", "TEXAS"],
    "Technology": ["ANTIGRAVITY", "PROPULSION", "ENERGY", "CLOAKING", "METAL", "ALLOY", "FUSION", "PLASMA", "SPECTRUM", "QUANTUM"],
    "Sightings": ["ROSWELL", "PHOENIX", "RENDLESHAM", "SHAGHARBOUR", "MCMINNVILLE", "STEPHENVILLE", "MANALAPAN", "ZIMBABWE"],
    "Abductions": ["HILLCOUPLE", "TRAVISWALTON", "WHITLEYSTRIEBER", "PASCAGOULA", "VILLA", "LORENTZ", "MEEKS", "BETTY", "BARNEY", "DUTROIT"],
    "UFO Types": ["DISC", "SPHERE", "CIGAR", "PYRAMID", "CONE", "DOMED", "TRIANGLE", "SAUCER", "CYLINDER", "VSHAPE"],
    "Government": ["BLUEBOOK", "GRUDGE", "SIGN", "PENTAGON", "MAJESTICTWELVE", "UAP", "CONGRESSIONAL", "DISCLOSURE", "CRASH", "CLASSIFIED"],
    "Pop Culture": ["CLOSEENCOUNTERS", "INDEPENDENCEDAY", "ARRIVAL", "STARMAN", "EXTRATERRESTRIAL", "XFILES", "ALIEN", "SIGNS", "ABYSS"],
    "Research": ["SETI", "WOWSIGNAL", "ASTROBIOLOGY", "BREAKTHROUGHLISTEN", "UFOMUSEUM", "NICAP", "CUFOS", "SCIENTIFIC", "RADAR"],
    "Men in Black": ["SHADOWY", "SUITS", "VISITORS", "ERASURE", "SECRETIVE", "QUESTIONING", "VANISHED", "EVIDENCE", "NEUTRALIZER", "INTIMIDATION"],
    "Phenomena": ["CROP", "LIGHTS", "AURAS", "ORB", "SIGHTINGS", "UNIDENTIFIED", "NOISES", "LORE", "TIME", "LEVITATION"],
    "Aliens": ["GREYS", "REPTILIANS", "ARCTURIANS", "NORDICS", "ZETA", "ANUNNAKI", "HYBRIDS", "BEINGS", "LUMINOUS", "DWARVES"],
    "Landings": ["SOCCORRO", "VALENSOLE", "EXETER", "WESTALL", "KELLYHOPKINSVILLE", "NORDICSITE", "LONNIE", "PASCA", "FLATWOODS", "SILPHIUM"],
    "Mysteries": ["TRIANGLE", "LOCHNESS", "YETI", "BIGFOOT", "SPHINX", "STONEHENGE", "ANCIENT", "PYRAMID", "MEGALITHS", "PORTALS"],
    "Technology": ["PROPULSION", "GRAVITY", "DISK", "ZEROPOINT", "TECH", "WARP", "REVERSE", "MAGNETISM", "ANTIGRAVITY", "EXPERIMENTS"],
    "Documents": ["FOIA", "REPORTS", "LEAKS", "PAPERS", "TESTIMONY", "RELEASED", "CONFIDENTIAL", "DOSSIER", "WHISTLEBLOWER", "BRIEFINGS"],
    "Encounters": ["CLOSEENCOUNTERS", "THIRDKIND", "FOURTHKIND", "CONTACT", "WITNESS", "PHENOMENON", "VISITATION", "ENTITY"],
    "Artifacts": ["METAMATERIALS", "DEBRIS", "ANOMALIES", "FRAGMENTS", "FOIL", "IMPRINTS", "SCARS", "WRECKAGE", "MATERIAL", "TESTS"],
    "Time Travel": ["PARADOX", "DIMENSION", "WARP", "FUTURE", "PAST", "LOOP", "CONTINUUM", "PORTAL", "QUANTUM", "PHYSICS"],
    "Stars": ["PLEIADES", "ORION", "VEGA", "SIRIUS", "ALPHA", "PROXIMA", "TAURI", "BETELGEUSE", "ALTAIR", "RIGEL"],
    "Exoplanets": ["KEPLER", "GJ", "TRAPPIST", "WOLF", "EARTHLIKE", "PLANET", "CANDIDATE", "ORBIT", "SYSTEM", "HABITABLE"],
    "Legends": ["CHUPACABRA", "THUNDERBIRD", "SKINWALKER", "MOTHMAN", "ALIENBIGCAT", "DRAGON", "SHAPESHIFTER", "FOLKLORE", "CRYPTID", "LORE"],
    "Lights": ["SPHERES", "BALL", "FLOATING", "PULSATING", "HOVERING", "BRIGHT", "GLOWING", "PHENOMENA", "SHADOW", "BEAMS"],
    "History": ["MESOPOTAMIA", "EGYPT", "MAYAN", "SUMERIAN", "VIMANA", "ROMAN", "AZTEC", "MIDDLEAGES", "INDUS", "CHACO"],
    "Patterns": ["CIRCLE", "LINES", "SWIRLS", "GEOMETRY", "DESIGNS", "FORMS", "FIGURES", "ALIGNMENTS", "LAYERS", "TRACKS"],
    "Communication": ["TRANSMISSION", "SIGNAL", "MESSAGE", "CODE", "INTERSTELLAR", "CONTACT", "FREQUENCY", "RADIATION", "WAVES"],
    "UAP Studies": ["INVESTIGATION", "ANALYSIS", "INSIGHT", "COVERT", "FILES", "PAPER", "TRACKING", "SURVEILLANCE", "SCIENTIFIC", "STUDY"],
    "Reports": ["INCIDENTS", "SIGHTINGS", "TESTIMONY", "ACCIDENTS", "WITNESSES", "VERIFICATIONS", "ACCUSATIONS", "CITINGS", "TRACKING"],
    "Events": ["CONFERENCES", "SYMPOSIUM", "WEBINAR", "MEETINGS", "COLLOQUIUM", "TALKS", "EXHIBITIONS", "CULTURE", "EXCHANGE"],
    "Places": ["CHILE", "PERU", "ICELAND", "ROSWELL", "RENDLESHAM", "PHOENIX", "SHAGHARBOUR", "STEPHENVILLE", "SIBERIA", "CANADA"],
    "Beams": ["LUMINESCENCE", "SPHERES", "CYLINDERS", "RADIANCE", "TRAILS", "LIGHT", "BRIGHTNESS", "ENIGMATIC", "MYSTERIOUS"],
    "Dimensions": ["REALMS", "PLANES", "LEVELS", "PORTALS", "DOORS", "ENTITIES", "UNIVERSES", "TRAVELS", "VOID", "ZONES"],
    "Symbols": ["MARKINGS", "ETCHINGS", "WRITING", "GLYPHS", "PATTERNS", "CODES", "LINES", "FORMS", "DESIGNS", "FEATURES"],
    "Energy": ["ZEROPOINT", "PROPULSION", "FIELD", "MAGNETISM", "FUSION", "ANTIMATTER", "REACTORS", "CURRENT", "PHOTONS", "WAVES"],
}


GRID_SIZE = 15  # Increased grid size for more words
CELL_SIZE = min(screen_width, screen_height) // (GRID_SIZE + 1)  # Fit grid on screen
MARGIN = 5
GRID_START_X = (screen_width - GRID_SIZE * CELL_SIZE) // 2
GRID_START_Y = 50

# Create the grid
def create_word_search(words, size):
    grid = [[' ' for _ in range(size)] for _ in range(size)]
    directions = [(0, 1), (1, 0), (1, 1), (-1, 1)]  # Right, Down, Diagonal Down, Diagonal Up

    def can_place_word(word, row, col, direction):
        dx, dy = direction
        for i in range(len(word)):
            new_row, new_col = row + i * dx, col + i * dy
            if not (0 <= new_row < size and 0 <= new_col < size):  # Out of bounds
                return False
            if grid[new_row][new_col] not in (' ', word[i]):  # Space occupied
                return False
        return True

    def place_word(word, row, col, direction):
        dx, dy = direction
        for i, char in enumerate(word):
            new_row, new_col = row + i * dx, col + i * dy
            grid[new_row][new_col] = char

    for word in words:
        placed = False
        while not placed:
            direction = random.choice(directions)
            row = random.randint(0, size - 1)
            col = random.randint(0, size - 1)
            if can_place_word(word, row, col, direction):
                place_word(word, row, col, direction)
                placed = True

    for row in range(size):
        for col in range(size):
            if grid[row][col] == ' ':
                grid[row][col] = random.choice(string.ascii_uppercase)

    return grid

# Check if a highlighted sequence corresponds to a valid word
def check_word(highlighted_cells, grid, words):
    if not highlighted_cells:
        return None

    # Get the selected word from highlighted cells
    selected_word = ''.join(grid[row][col] for row, col in highlighted_cells)

    # Check if the selected word is in the list
    if selected_word in words:
        return selected_word
    return None

# Draw the grid and buttons
def draw_grid(grid, highlighted_cells, found_words, game_complete, words):
    screen.fill(WHITE)

    # Draw the word list
    words_y = GRID_START_Y + GRID_SIZE * CELL_SIZE + 20
    word_text = "Words to Find: " + ", ".join(words)
    words_surface = small_font.render(word_text, True, BLACK)
    screen.blit(words_surface, (20, words_y))

    # Draw the grid
    for row in range(GRID_SIZE):
        for col in range(GRID_SIZE):
            x = GRID_START_X + col * CELL_SIZE
            y = GRID_START_Y + row * CELL_SIZE
            rect = pygame.Rect(x, y, CELL_SIZE - MARGIN, CELL_SIZE - MARGIN)

            # Highlight selected or found words
            if (row, col) in highlighted_cells:
                pygame.draw.rect(screen, BLUE, rect)
            elif any((row, col) in word for word in found_words.values()):
                pygame.draw.rect(screen, GREEN, rect)
            else:
                pygame.draw.rect(screen, GRAY, rect)

            # Draw letters
            text = font.render(grid[row][col], True, BLACK)
            screen.blit(text, (x + 10, y + 5))

    # Draw the Start New Game button (centered and larger)
    button_width, button_height = 200, 80
    button_x = (screen_width - button_width) // 2
    button_y = words_y + 50
    new_game_button = pygame.Rect(button_x, button_y, button_width, button_height)
    pygame.draw.rect(screen, BLACK, new_game_button)
    new_game_text = small_font.render("New Game", True, WHITE)
    text_rect = new_game_text.get_rect(center=new_game_button.center)
    screen.blit(new_game_text, text_rect)

    # Display congratulations message if game is complete
    if game_complete:
        congrats_text = large_font.render("CONGRATULATIONS!", True, GREEN)
        text_rect = congrats_text.get_rect(center=(screen_width // 2, screen_height // 2))
        screen.blit(congrats_text, text_rect)

    return new_game_button  # Return the button for collision detection

# Check if all words are found
def all_words_found(found_words, total_words):
    return len(found_words) == len(total_words)

# Main function
def main():
    global WORDS, GRID_SIZE, CELL_SIZE
    selected_topic = random.choice(list(TOPICS.keys()))  # Select a random topic
    WORDS = TOPICS[selected_topic]  # Get words from the selected topic
    grid = create_word_search(WORDS, GRID_SIZE)
    running = True
    highlighted_cells = []
    found_words = {}
    game_complete = False
    dragging = False  # New variable to track dragging
    start_cell = None  # Track the start cell for highlighting

    while running:
        new_game_button = draw_grid(grid, highlighted_cells, found_words, game_complete, WORDS)  # Get the button

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

            # Handle mouse input
            if event.type == pygame.MOUSEBUTTONDOWN:
                mouse_pos = pygame.mouse.get_pos()
                if new_game_button.collidepoint(mouse_pos):
                    # Start a new unique game
                    selected_topic = random.choice(list(TOPICS.keys()))
                    WORDS = TOPICS[selected_topic]
                    grid = create_word_search(WORDS, GRID_SIZE)
                    highlighted_cells.clear()
                    found_words.clear()
                    game_complete = False
                elif not game_complete:
                    # Start highlighting
                    dragging = True
                    start_cell = ((mouse_pos[1] - GRID_START_Y) // CELL_SIZE,
                                   (mouse_pos[0] - GRID_START_X) // CELL_SIZE)
                    if (0 <= start_cell[0] < GRID_SIZE and 0 <= start_cell[1] < GRID_SIZE):  # Ensure the start cell is valid
                        highlighted_cells = [start_cell]

            elif event.type == pygame.MOUSEMOTION and dragging:
                x, y = pygame.mouse.get_pos()
                col = (x - GRID_START_X) // CELL_SIZE
                row = (y - GRID_START_Y) // CELL_SIZE
                if 0 <= row < GRID_SIZE and 0 <= col < GRID_SIZE:
                    # Check for valid highlighting in all directions
                    if start_cell:
                        start_row, start_col = start_cell
                        if (row == start_row or col == start_col or  # Horizontal or Vertical
                            abs(row - start_row) == abs(col - start_col)):  # Diagonal
                            if (row, col) not in highlighted_cells:  # Prevent duplicates
                                highlighted_cells.append((row, col))

            elif event.type == pygame.MOUSEBUTTONUP:
                dragging = False
                found_word = check_word(highlighted_cells, grid, WORDS)
                if found_word and found_word not in found_words:
                    found_words[found_word] = highlighted_cells[:]
                highlighted_cells.clear()

        # Check if all words are found
        game_complete = all_words_found(found_words, WORDS)
        pygame.display.flip()

    pygame.quit()

if __name__ == "__main__":
    main()

